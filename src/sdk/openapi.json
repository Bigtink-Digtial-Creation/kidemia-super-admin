{
  "openapi": "3.1.0",
  "info": {
    "title": "Kidemia API",
    "description": "Kidemia API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Register a new user account.\n\n- **email**: Valid email address\n- **password**: Min 8 characters with uppercase, lowercase, and number\n- **first_name**: User's first name\n- **last_name**: User's last name\n- **user_type**: Type of user (student, guardian, institution_admin, platform_admin)",
        "operationId": "register_api_v1_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RegisterResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login to get access token",
        "description": "Authenticate user and get access tokens.\n\n- **email**: User's email address\n- **password**: User's password\n- **remember_me**: Keep user logged in for longer",
        "operationId": "login_api_v1_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Get a new access token using refresh token.\n\n- **refresh_token**: Valid refresh token",
        "operationId": "refresh_token_api_v1_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefreshTokenRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TokenResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout user",
        "description": "Logout user by revoking refresh token.\n\n- **refresh_token**: Refresh token to revoke",
        "operationId": "logout_api_v1_auth_logout_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefreshTokenRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout-all": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Logout from all devices",
        "description": "Logout user from all devices by revoking all refresh tokens.",
        "operationId": "logout_all_devices_api_v1_auth_logout_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/auth/change-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Change user password",
        "description": "Change current user's password.\n\n- **current_password**: Current password\n- **new_password**: New password (min 8 chars with requirements)",
        "operationId": "change_password_api_v1_auth_change_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangePasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Get current user profile",
        "description": "Get current authenticated user's profile.",
        "operationId": "get_current_user_api_v1_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Request password reset",
        "description": "Request password reset link via email.\n\n- **email**: User's email address",
        "operationId": "forgot_password_api_v1_auth_forgot_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ForgotPasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Reset password with token",
        "description": "Reset password using reset token.\n\n- **token**: Password reset token from email\n- **new_password**: New password",
        "operationId": "reset_password_api_v1_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify-email": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Verify email address",
        "description": "Verify user's email address.\n\n- **token**: Email verification token",
        "operationId": "verify_email_api_v1_auth_verify_email_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerifyEmailRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/resend-verification": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Resend verification email",
        "description": "Resend email verification link.",
        "operationId": "resend_verification_api_v1_auth_resend_verification_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/users/": {
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Create a new user account.\n\n- **email**: Valid email address\n- **password**: Min 8 characters with uppercase, lowercase, and number\n- **first_name**: User's first name\n- **last_name**: User's last name\n- **middle_name**: User's middle name (optional)\n- **phone_number**: Phone number (optional)\n- **date_of_birth**: Date of birth (optional)\n- **user_type**: Type of user (student, guardian, institution_admin, platform_admin)\n- **username**: Username (optional)",
        "operationId": "create_user_api_v1_users__post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assign_default_role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Assign default role based on user type",
              "default": true,
              "title": "Assign Default Role"
            },
            "description": "Assign default role based on user type"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Users"],
        "summary": "List all users",
        "description": "Get list of all users with pagination.",
        "operationId": "list_users_api_v1_users__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserResponse" },
                  "title": "Response List Users Api V1 Users  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/active": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all active users",
        "description": "Get all active users with pagination.",
        "operationId": "get_active_users_api_v1_users_active_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserResponse" },
                  "title": "Response Get Active Users Api V1 Users Active Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/type/{user_type}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get users by type",
        "description": "Get users by their type with pagination.\n\n- **user_type**: student, guardian, institution_admin, or platform_admin",
        "operationId": "get_users_by_type_api_v1_users_type__user_type__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_type",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/UserType" }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserResponse" },
                  "title": "Response Get Users By Type Api V1 Users Type  User Type  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/search": {
      "get": {
        "tags": ["Users"],
        "summary": "Search users",
        "description": "Search users by name, email, or username.\n\n- **q**: Search query (searches in first_name, last_name, email, username)",
        "operationId": "search_users_api_v1_users_search_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Search query",
              "title": "Q"
            },
            "description": "Search query"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserResponse" },
                  "title": "Response Search Users Api V1 Users Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/email/{email}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by email",
        "description": "Get user by email address.",
        "operationId": "get_user_by_email_api_v1_users_email__email__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Email" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/username/{username}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by username",
        "description": "Get user by username.",
        "operationId": "get_user_by_username_api_v1_users_username__username__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Username" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Get user details by ID.",
        "operationId": "get_user_api_v1_users__user_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update user details.\n\n- **first_name**: Updated first name\n- **last_name**: Updated last name\n- **middle_name**: Updated middle name\n- **phone_number**: Updated phone number\n- **date_of_birth**: Updated date of birth\n- **profile_picture_url**: Profile picture URL\n- **bio**: User bio\n- **language**: Preferred language\n- **timezone**: User's timezone",
        "operationId": "update_user_api_v1_users__user_id__patch",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete (soft delete) a user by ID.",
        "operationId": "delete_user_api_v1_users__user_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/activate": {
      "post": {
        "tags": ["Users"],
        "summary": "Activate user",
        "description": "Activate a user account.",
        "operationId": "activate_user_api_v1_users__user_id__activate_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/deactivate": {
      "post": {
        "tags": ["Users"],
        "summary": "Deactivate user",
        "description": "Deactivate a user account.",
        "operationId": "deactivate_user_api_v1_users__user_id__deactivate_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/verify-email": {
      "post": {
        "tags": ["Users"],
        "summary": "Verify user email",
        "description": "Mark user's email as verified.",
        "operationId": "verify_user_email_api_v1_users__user_id__verify_email_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/roles": {
      "post": {
        "tags": ["Users"],
        "summary": "Assign roles to user",
        "description": "Assign multiple roles to a user.\n\n- **role_ids**: List of role IDs to assign",
        "operationId": "assign_roles_to_user_api_v1_users__user_id__roles_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRolesToUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/roles/{role_id}": {
      "post": {
        "tags": ["Users"],
        "summary": "Add single role to user",
        "description": "Add a single role to a user.",
        "operationId": "add_role_to_user_api_v1_users__user_id__roles__role_id__post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Remove role from user",
        "description": "Remove a role from a user.",
        "operationId": "remove_role_from_user_api_v1_users__user_id__roles__role_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          },
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/": {
      "post": {
        "tags": ["Roles"],
        "summary": "Create a new role",
        "description": "Create a new custom role.\n\n- **name**: Unique role name\n- **display_name**: Human-readable role name\n- **description**: Role description\n- **role_type**: Type of role (system, custom)\n- **permission_ids**: List of permission IDs to assign",
        "operationId": "create_role_api_v1_roles__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Roles"],
        "summary": "List all roles",
        "description": "Get list of all roles with pagination.",
        "operationId": "list_roles_api_v1_roles__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/RoleResponse" },
                  "title": "Response List Roles Api V1 Roles  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/system": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get all system roles",
        "description": "Get all system-defined roles.",
        "operationId": "get_system_roles_api_v1_roles_system_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RoleResponse" },
                  "type": "array",
                  "title": "Response Get System Roles Api V1 Roles System Get"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/roles/custom": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get all custom roles",
        "description": "Get all custom/user-created roles.",
        "operationId": "get_custom_roles_api_v1_roles_custom_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/RoleResponse" },
                  "type": "array",
                  "title": "Response Get Custom Roles Api V1 Roles Custom Get"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/roles/name/{name}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get role by name",
        "description": "Get role by its unique name.\n\n- **name**: Role name",
        "operationId": "get_role_by_name_api_v1_roles_name__name__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Name" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/{role_id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get role by ID",
        "description": "Get role details by ID.",
        "operationId": "get_role_api_v1_roles__role_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Roles"],
        "summary": "Update role",
        "description": "Update role details. Cannot update system roles.\n\n- **display_name**: Updated display name\n- **description**: Updated description\n- **permission_ids**: Updated list of permission IDs",
        "operationId": "update_role_api_v1_roles__role_id__patch",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete role",
        "description": "Delete a custom role by ID. Cannot delete system roles.",
        "operationId": "delete_role_api_v1_roles__role_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/{role_id}/permissions": {
      "post": {
        "tags": ["Roles"],
        "summary": "Assign permissions to role",
        "description": "Assign multiple permissions to a role.\n\n- **permission_ids**: List of permission IDs to assign",
        "operationId": "assign_permissions_to_role_api_v1_roles__role_id__permissions_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPermissionsToRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/roles/{role_id}/permissions/{permission_id}": {
      "post": {
        "tags": ["Roles"],
        "summary": "Add single permission to role",
        "description": "Add a single permission to a role.",
        "operationId": "add_permission_to_role_api_v1_roles__role_id__permissions__permission_id__post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          },
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Permission Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Remove permission from role",
        "description": "Remove a permission from a role.",
        "operationId": "remove_permission_from_role_api_v1_roles__role_id__permissions__permission_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Role Id" }
          },
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Permission Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RoleResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/permissions/": {
      "post": {
        "tags": ["Permissions"],
        "summary": "Create a new permission",
        "description": "Create a new permission.\n\n- **name**: Unique permission name (e.g., 'users:create')\n- **display_name**: Human-readable permission name\n- **description**: Permission description\n- **resource**: Resource name (e.g., 'users', 'roles')\n- **action**: Action name (e.g., 'create', 'read', 'update', 'delete')",
        "operationId": "create_permission_api_v1_permissions__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PermissionCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Permissions"],
        "summary": "List all permissions",
        "description": "Get list of all permissions with pagination.",
        "operationId": "list_permissions_api_v1_permissions__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponse"
                  },
                  "title": "Response List Permissions Api V1 Permissions  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/permissions/resource/{resource}": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get permissions by resource",
        "description": "Get all permissions for a specific resource.\n\n- **resource**: Resource name (e.g., 'users', 'roles')",
        "operationId": "get_permissions_by_resource_api_v1_permissions_resource__resource__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Resource" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponse"
                  },
                  "title": "Response Get Permissions By Resource Api V1 Permissions Resource  Resource  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/permissions/action/{action}": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get permissions by action",
        "description": "Get all permissions for a specific action.\n\n- **action**: Action name (e.g., 'create', 'read', 'update', 'delete')",
        "operationId": "get_permissions_by_action_api_v1_permissions_action__action__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Action" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponse"
                  },
                  "title": "Response Get Permissions By Action Api V1 Permissions Action  Action  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/permissions/name/{name}": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get permission by name",
        "description": "Get permission by its unique name.\n\n- **name**: Permission name",
        "operationId": "get_permission_by_name_api_v1_permissions_name__name__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Name" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/permissions/{permission_id}": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get permission by ID",
        "description": "Get permission details by ID.",
        "operationId": "get_permission_api_v1_permissions__permission_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Permission Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Permissions"],
        "summary": "Update permission",
        "description": "Update permission details.\n\n- **display_name**: Updated display name\n- **description**: Updated description",
        "operationId": "update_permission_api_v1_permissions__permission_id__patch",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Permission Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PermissionUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PermissionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Permissions"],
        "summary": "Delete permission",
        "description": "Delete a permission by ID.",
        "operationId": "delete_permission_api_v1_permissions__permission_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "permission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Permission Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/subjects/": {
      "post": {
        "tags": ["Subjects"],
        "summary": "Create a new subject",
        "description": "Create a new subject.\n\nRequires `content:create` permission.",
        "operationId": "create_subject_api_v1_subjects__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubjectCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubjectResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Subjects"],
        "summary": "Get All subjects",
        "description": "Get all subjects with pagination.\n\n- **skip**: Number of records to skip\n- **limit**: Maximum number of records to return\n- **active_only**: Return only active subjects",
        "operationId": "get_subjects_api_v1_subjects__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Active Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubjectListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/subjects/featured": {
      "get": {
        "tags": ["Subjects"],
        "summary": "Get featured subjects",
        "description": "Get featured subjects.",
        "operationId": "get_featured_subjects_api_v1_subjects_featured_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SubjectResponse" },
                  "title": "Response Get Featured Subjects Api V1 Subjects Featured Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/subjects/search": {
      "get": {
        "tags": ["Subjects"],
        "summary": "Search subjects",
        "description": "Search subjects by name, code, or description.",
        "operationId": "search_subjects_api_v1_subjects_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "title": "Q" }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/SubjectResponse" },
                  "title": "Response Search Subjects Api V1 Subjects Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/subjects/{subject_id}": {
      "get": {
        "tags": ["Subjects"],
        "summary": "Get subject by ID",
        "description": "Get a specific subject by ID.",
        "operationId": "get_subject_api_v1_subjects__subject_id__get",
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Subject Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubjectResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Subjects"],
        "summary": "Update a subject",
        "description": "Update a subject.\n\nRequires `content:update` permission.",
        "operationId": "update_subject_api_v1_subjects__subject_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Subject Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubjectUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SubjectResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Subjects"],
        "summary": "Delete a subject",
        "description": "Delete a subject (soft delete).\n\nRequires `content:delete` permission.",
        "operationId": "delete_subject_api_v1_subjects__subject_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Subject Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/topics/": {
      "post": {
        "tags": ["Subject Topics"],
        "summary": "Create a new topic",
        "description": "Create a new Topic\n\nParameters:\n- subject_id (string <uuid>, required): The Subject Id this topic belongs to.\n- name (string, required, 1..200 chars): The name of the topic.\n- code (string, required, 1..20 chars): Short code/identifier for the topic.\n- description (string | null): A description of the topic.\n- content (string | null): Rich content or body text for the topic.\n- video_url (string | null): Optional video resource link.\n- document_url (string | null): Optional document resource link.\n- parent_id (string <uuid> | null): If this topic has a parent topic, supply its id.\n- order (integer >= 0, default=0): The order of the topic in listings.\n- estimated_time_minutes (integer | null): Estimated time (in minutes) to complete this topic.\n- difficulty_level (string | null): Difficulty level of the topic. Enum: \"easy\", \"medium\", \"hard\", \"expert\".\n- is_active (boolean, default=true): Whether the topic is active.\n\nResponses:\n- 201 Created: Returns the created Topic object.\n- 400 Bad Request: Invalid input data.\n- 404 Not Found: Subject or parent topic not found.",
        "operationId": "create_topic_api_v1_topics__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TopicCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopicResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/topics/bulk": {
      "post": {
        "tags": ["Subject Topics"],
        "summary": "Bulk create multiple topics",
        "description": "Bulk Create Topics\n\nCreate multiple topics in a single request.\n\nParameters:\n- topics_data (array of TopicCreate): A list of topics to create.\n  Each topic must include:\n    - subject_id (string <uuid>, required)\n    - name (string, required)\n    - code (string, required)\n    - description (string | null)\n    - content (string | null)\n    - video_url (string | null)\n    - document_url (string | null)\n    - parent_id (string <uuid> | null)\n    - order (integer >= 0, default=0)\n    - estimated_time_minutes (integer | null)\n    - difficulty_level (string | null) Enum: \"easy\", \"medium\", \"hard\", \"expert\"\n    - is_active (boolean, default=true)\n\nResponses:\n- 201 Created: Returns a list of successfully created topics.\n- 400 Bad Request: If any topic input is invalid.\n- 404 Not Found: If a subject or parent topic is missing.",
        "operationId": "bulk_create_topics_api_v1_topics_bulk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/TopicCreate" },
                "type": "array",
                "title": "Topics Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/TopicResponse" },
                  "type": "array",
                  "title": "Response Bulk Create Topics Api V1 Topics Bulk Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/topics/subject/{subject_id}": {
      "get": {
        "tags": ["Subject Topics"],
        "summary": "Get topics by subject",
        "description": "Get all topics for a specific subject.",
        "operationId": "get_topics_by_subject_api_v1_topics_subject__subject_id__get",
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Subject Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopicListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/topics/search": {
      "get": {
        "tags": ["Subject Topics"],
        "summary": "Search topics",
        "description": "Search topics by name, code, or description.",
        "operationId": "search_topics_api_v1_topics_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "minLength": 1, "title": "Q" }
          },
          {
            "name": "subject_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Subject Id"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TopicResponse" },
                  "title": "Response Search Topics Api V1 Topics Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/topics/{topic_id}": {
      "get": {
        "tags": ["Subject Topics"],
        "summary": "Get topic by ID",
        "description": "Get a specific topic by ID.",
        "operationId": "get_topic_api_v1_topics__topic_id__get",
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Topic Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopicResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Subject Topics"],
        "summary": "Update a topic",
        "description": "Update a topic.\n\nRequires `content:update` permission.",
        "operationId": "update_topic_api_v1_topics__topic_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Topic Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TopicUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopicResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Subject Topics"],
        "summary": "Delete a topic",
        "description": "Delete a topic (soft delete).\n\nRequires `content:delete` permission.",
        "operationId": "delete_topic_api_v1_topics__topic_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "topic_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Topic Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/bulk-questions": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Create bulk questions",
        "operationId": "create_bulk_question_api_v1_questions_bulk_questions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "$ref": "#/components/schemas/QuestionCreate" },
                "type": "array",
                "title": "Question Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/QuestionResponse" },
                  "type": "array",
                  "title": "Response Create Bulk Question Api V1 Questions Bulk Questions Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/questions/": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Create a new question",
        "description": "Create a new question.\n\nParameters:\n------------------------\n- subject_id : string <uuid> (required)\n- topic_id : string <uuid> (required)\n- question_text : string (required, non-empty)\n- question_type : string (required, enum)\n    - multiple_choice\n    - true_false\n    - fill_in_blank\n    - essay\n    - matching\n    - ordering\n- difficulty_level : string (required, enum)\n    - easy\n    - medium\n    - hard\n    - expert\n- explanation : string | null (optional)\n- image_url : string | null (optional)\n- audio_url : string | null (optional)\n- video_url : string | null (optional)\n- points : integer (default=1, range [1..100])\n- time_limit_seconds : integer | null (optional)\n- options : Array[object] (required, >= 2 items)\n- tag_ids : Array[string <uuid>] | null (optional)\n\nResponses:\n----------\n- 201 Created : Question successfully created\n- 400 Bad Request : Invalid input\n- 401 Unauthorized : Authentication required\n- 403 Forbidden : Not enough permissions",
        "operationId": "create_question_api_v1_questions__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Topic Questions"],
        "summary": "Get questions with filters",
        "description": "Get questions with various filters.\n\n- **subject_id**: Filter by subject\n- **topic_id**: Filter by topic\n- **difficulty_level**: Filter by difficulty\n- **question_type**: Filter by question type\n- **status**: Filter by status\n- **search**: Search in question text",
        "operationId": "get_questions_api_v1_questions__get",
        "parameters": [
          {
            "name": "subject_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Subject Id"
            }
          },
          {
            "name": "topic_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Topic Id"
            }
          },
          {
            "name": "difficulty_level",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/DifficultyLevel" },
                { "type": "null" }
              ],
              "title": "Difficulty Level"
            }
          },
          {
            "name": "question_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/QuestionType" },
                { "type": "null" }
              ],
              "title": "Question Type"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/QuestionStatus" },
                { "type": "null" }
              ],
              "title": "Status"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/by-topics": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Get questions grouped by multiple topics",
        "description": "Get questions grouped by multiple topics.\n\n- **topic_ids**: List of topic UUIDs\n- **limit**: Max questions per topic",
        "operationId": "get_questions_by_topics_api_v1_questions_by_topics_post",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "type": "string", "format": "uuid" },
                "title": "Topic Ids"
              },
              "example": ["uuid1", "uuid2", "uuid3"]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicQuestionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/random": {
      "get": {
        "tags": ["Topic Questions"],
        "summary": "Get random questions",
        "description": "Get random approved questions for test/exam generation.\n\n- **count**: Number of questions to return\n- **subject_id**: Filter by subject\n- **topic_id**: Filter by topic\n- **difficulty**: Filter by difficulty\n- **question_type**: Filter by question type",
        "operationId": "get_random_questions_api_v1_questions_random_get",
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "title": "Count"
            }
          },
          {
            "name": "subject_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Subject Id"
            }
          },
          {
            "name": "topic_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Topic Id"
            }
          },
          {
            "name": "difficulty",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/DifficultyLevel" },
                { "type": "null" }
              ],
              "title": "Difficulty"
            }
          },
          {
            "name": "question_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/QuestionType" },
                { "type": "null" }
              ],
              "title": "Question Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionPublicResponse"
                  },
                  "title": "Response Get Random Questions Api V1 Questions Random Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/{question_id}": {
      "get": {
        "tags": ["Topic Questions"],
        "summary": "Get question by ID",
        "description": "Get a specific question by ID.\n\n- **include_answers**: Include correct answer information (default: true)",
        "operationId": "get_question_api_v1_questions__question_id__get",
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          },
          {
            "name": "include_answers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Answers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Topic Questions"],
        "summary": "Update a question",
        "description": "Update a question.\n\nRequires `content:update` permission.",
        "operationId": "update_question_api_v1_questions__question_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Topic Questions"],
        "summary": "Delete a question",
        "description": "Delete a question (soft delete).\n\nRequires `content:delete` permission.",
        "operationId": "delete_question_api_v1_questions__question_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/{question_id}/submit-review": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Submit question for review",
        "description": "Submit a question for review.\n\nRequires `content:create` permission.",
        "operationId": "submit_for_review_api_v1_questions__question_id__submit_review_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/{question_id}/review": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Review a question",
        "description": "Review a question (approve or reject).\n\nRequires `content:approve` permission.",
        "operationId": "review_question_api_v1_questions__question_id__review_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Question Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionReviewRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/questions/bulk-import": {
      "post": {
        "tags": ["Topic Questions"],
        "summary": "Bulk import questions",
        "description": "Bulk import multiple questions.\n\nRequires `content:create` permission.",
        "operationId": "bulk_import_questions_api_v1_questions_bulk_import_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkQuestionImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkQuestionImportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/tags/": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get all tags",
        "description": "Get all question tags.",
        "operationId": "get_tags_api_v1_tags__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QuestionTagResponse"
                  },
                  "type": "array",
                  "title": "Response Get Tags Api V1 Tags  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tags"],
        "summary": "Create a question tag",
        "description": "Create a new question tag.",
        "operationId": "create_tag_api_v1_tags__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionTagCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionTagResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/tags/popular": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get popular tags",
        "description": "Get most used tags.",
        "operationId": "get_popular_tags_api_v1_tags_popular_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 20, "title": "Limit" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionTagResponse"
                  },
                  "title": "Response Get Popular Tags Api V1 Tags Popular Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/tags/{tag_id}": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get tag by ID",
        "description": "Get a specific tag by ID.",
        "operationId": "get_tag_api_v1_tags__tag_id__get",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Tag Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionTagResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Tags"],
        "summary": "Update a tag",
        "description": "Update a question tag.",
        "operationId": "update_tag_api_v1_tags__tag_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Tag Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuestionTagUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuestionTagResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tags"],
        "summary": "Delete a tag",
        "description": "Delete a question tag.",
        "operationId": "delete_tag_api_v1_tags__tag_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Tag Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/": {
      "post": {
        "tags": ["Assessments"],
        "summary": "Create a new assessment",
        "description": "Create a new assessment (test or exam).\n\nRequires `assessment:create` permission.\n\n- **assessment_type**: TEST (free) or EXAM (paid)\n- **category**: JAMB, WAEC, NECO, Common Entrance, etc.\n- **question_selection_mode**: MANUAL, RANDOM, or ADAPTIVE",
        "operationId": "create_assessment_api_v1_assessments__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssessmentCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AssessmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Assessments"],
        "summary": "Get all assessments",
        "description": "Get assessments with filters.\n\n- **assessment_type**: Filter by TEST or EXAM\n- **category**: Filter by JAMB, WAEC, NECO, etc.\n- **subject_id**: Filter by subject\n- **exam_year**: Filter by year (e.g., 2024, 2023)\n- **search**: Search by title, code, or description",
        "operationId": "get_assessments_api_v1_assessments__get",
        "parameters": [
          {
            "name": "assessment_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentType" },
                { "type": "null" }
              ],
              "title": "Assessment Type"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentCategory" },
                { "type": "null" }
              ],
              "title": "Category"
            }
          },
          {
            "name": "subject_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "null" }
              ],
              "title": "Subject Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentStatus" },
                { "type": "null" }
              ],
              "title": "Status"
            }
          },
          {
            "name": "exam_year",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "Exam Year"
            }
          },
          {
            "name": "min_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "title": "Min Price"
            }
          },
          {
            "name": "max_price",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "number" }, { "type": "null" }],
              "title": "Max Price"
            }
          },
          {
            "name": "is_public",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "boolean" }, { "type": "null" }],
              "title": "Is Public"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Search"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/auto-generate": {
      "post": {
        "tags": ["Assessments"],
        "summary": "Auto-generate assessment from topics",
        "description": "Automatically generate a practice assessment from selected topics.\n\nThis endpoint allows students to create personalized practice tests by:\n- Selecting a subject\n- Choosing specific topics they want to practice\n- Setting number of questions and duration\n- Optionally filtering by difficulty and question types\n\nThe system will:\n1. Find approved questions from selected topics\n2. Randomly select the requested number of questions\n3. Create and publish the assessment immediately\n4. Return assessment details for the student to start\n\n**Use Case:** Student wants to practice specific topics before an exam\n\nExample:\n```json\n{\n    \"subject_id\": \"uuid-mathematics\",\n    \"topic_ids\": [\"uuid-algebra\", \"uuid-geometry\"],\n    \"number_of_questions\": 20,\n    \"duration_minutes\": 30,\n    \"difficulty_level\": \"MEDIUM\"\n}\n```",
        "operationId": "auto_generate_assessment_api_v1_assessments_auto_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AutoAssessmentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoAssessmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/assessments/available": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get currently available assessments",
        "description": "Get assessments that are currently available for taking.",
        "operationId": "get_available_assessments_api_v1_assessments_available_get",
        "parameters": [
          {
            "name": "assessment_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentType" },
                { "type": "null" }
              ],
              "title": "Assessment Type"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentCategory" },
                { "type": "null" }
              ],
              "title": "Category"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentSummaryResponse"
                  },
                  "title": "Response Get Available Assessments Api V1 Assessments Available Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/popular": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get popular assessments",
        "description": "Get popular assessments based on attempt count.",
        "operationId": "get_popular_assessments_api_v1_assessments_popular_get",
        "parameters": [
          {
            "name": "assessment_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "$ref": "#/components/schemas/AssessmentType" },
                { "type": "null" }
              ],
              "title": "Assessment Type"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssessmentSummaryResponse"
                  },
                  "title": "Response Get Popular Assessments Api V1 Assessments Popular Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/categories/{category}/years": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get available years for a category",
        "description": "Get list of years with assessments for a specific category (e.g., JAMB 2024, 2023, etc.).",
        "operationId": "get_category_years_api_v1_assessments_categories__category__years_get",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": { "$ref": "#/components/schemas/AssessmentCategory" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "integer" },
                  "title": "Response Get Category Years Api V1 Assessments Categories  Category  Years Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{assessment_id}": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get assessment by ID",
        "description": "Get a specific assessment by ID.\n\n- **include_questions**: Include full question details",
        "operationId": "get_assessment_api_v1_assessments__assessment_id__get",
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          },
          {
            "name": "include_questions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Questions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AssessmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Assessments"],
        "summary": "Update an assessment",
        "description": "Update an assessment.\n\nRequires `assessment:update` permission.\nNote: Published assessments must be archived before updating.",
        "operationId": "update_assessment_api_v1_assessments__assessment_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AssessmentUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AssessmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Assessments"],
        "summary": "Delete an assessment",
        "description": "Delete an assessment (soft delete).\n\nRequires `assessment:delete` permission.\nCannot delete assessments with active attempts.",
        "operationId": "delete_assessment_api_v1_assessments__assessment_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{assessment_id}/publish": {
      "post": {
        "tags": ["Assessments"],
        "summary": "Publish an assessment",
        "description": "Publish an assessment to make it available to students.\n\nRequires `assessment:publish` permission.",
        "operationId": "publish_assessment_api_v1_assessments__assessment_id__publish_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AssessmentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/assessments/{assessment_id}/statistics": {
      "get": {
        "tags": ["Assessments"],
        "summary": "Get assessment statistics",
        "description": "Get detailed statistics for an assessment.",
        "operationId": "get_assessment_statistics_api_v1_assessments__assessment_id__statistics_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssessmentStatistics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/{assessment_id}/start": {
      "post": {
        "tags": ["Attempts"],
        "summary": "Start an assessment attempt",
        "description": "Start a new assessment attempt.\n\n- Validates assessment availability\n- Checks attempt limits\n- Verifies payment for exams\n- Creates or resumes attempt",
        "operationId": "start_attempt_api_v1_attempts__assessment_id__start_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AttemptStartRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttemptStartResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/{attempt_id}/answer": {
      "post": {
        "tags": ["Attempts"],
        "summary": "Save an answer",
        "description": "Save or update an answer for a question.\n\n- Can be called multiple times for the same question\n- Tracks time spent and edit count\n- Supports flagging for review",
        "operationId": "save_answer_api_v1_attempts__attempt_id__answer_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SaveAnswerRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Save Answer Api V1 Attempts  Attempt Id  Answer Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/{attempt_id}/submit": {
      "post": {
        "tags": ["Attempts"],
        "summary": "Submit an attempt",
        "description": "Submit an assessment attempt for grading.\n\n- Auto-grades objective questions\n- Marks essays for manual grading\n- Calculates scores and ranking\n- Updates assessment statistics",
        "operationId": "submit_attempt_api_v1_attempts__attempt_id__submit_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttemptResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/{attempt_id}/progress": {
      "get": {
        "tags": ["Attempts"],
        "summary": "Get attempt progress",
        "description": "Get current progress of an ongoing attempt.\n\nReturns:\n- Time spent and remaining\n- Questions answered/unanswered\n- Flagged questions count\n- Submission eligibility",
        "operationId": "get_attempt_progress_api_v1_attempts__attempt_id__progress_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttemptProgressResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/{attempt_id}/result": {
      "get": {
        "tags": ["Attempts"],
        "summary": "Get attempt result",
        "description": "Get result of a completed attempt.\n\n- **include_answers**: Include detailed answer breakdown with correct answers",
        "operationId": "get_attempt_result_api_v1_attempts__attempt_id__result_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          },
          {
            "name": "include_answers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Answers"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttemptResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/my-attempts": {
      "get": {
        "tags": ["Attempts"],
        "summary": "Get my attempts",
        "description": "Get all attempts for the current user.",
        "operationId": "get_my_attempts_api_v1_attempts_my_attempts_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AttemptListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/attempts/delete-attempt": {
      "get": {
        "tags": ["Attempts"],
        "summary": "Delete attempts",
        "description": "Delete attempt for the current user.\nThis is for development purpose only",
        "operationId": "delete_attempts_api_v1_attempts_delete_attempt_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/grading/attempts/{attempt_id}/auto-grade": {
      "post": {
        "tags": ["Grading"],
        "summary": "Auto-grade an attempt",
        "description": "Auto-grade an assessment attempt.\n\n- Grades objective questions automatically\n- Identifies essays requiring manual grading\n- Calculates scores and pass/fail status",
        "operationId": "auto_grade_attempt_api_v1_grading_attempts__attempt_id__auto_grade_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Attempt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Auto Grade Attempt Api V1 Grading Attempts  Attempt Id  Auto Grade Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/grading/answers/{answer_id}/manual-grade": {
      "post": {
        "tags": ["Grading"],
        "summary": "Manually grade an answer",
        "description": "Manually grade an answer (typically for essays).\n\nRequires `grading:manual` permission.",
        "operationId": "manual_grade_answer_api_v1_grading_answers__answer_id__manual_grade_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "answer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Answer Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ManualGradeRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Manual Grade Answer Api V1 Grading Answers  Answer Id  Manual Grade Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/grading/answers/bulk-grade": {
      "post": {
        "tags": ["Grading"],
        "summary": "Bulk grade multiple answers",
        "description": "Bulk grade multiple answers at once.\n\nRequires `grading:manual` permission.\n\nExpected format:\n```json\n[\n    {\n        \"answer_id\": \"uuid\",\n        \"points_earned\": 8.5,\n        \"feedback\": \"Good work\"\n    }\n]\n```",
        "operationId": "bulk_grade_answers_api_v1_grading_answers_bulk_grade_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": { "additionalProperties": true, "type": "object" },
                "type": "array",
                "title": "Grading Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Bulk Grade Answers Api V1 Grading Answers Bulk Grade Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/grading/pending": {
      "get": {
        "tags": ["Grading"],
        "summary": "Get attempts pending grading",
        "description": "Get list of attempts pending manual grading.\n\nReturns attempts with essays or subjective questions awaiting grading.",
        "operationId": "get_pending_grading_api_v1_grading_pending_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "object", "additionalProperties": true },
                  "title": "Response Get Pending Grading Api V1 Grading Pending Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboard/assessments/{assessment_id}": {
      "get": {
        "tags": ["Leaderboard"],
        "summary": "Get assessment leaderboard",
        "description": "Get leaderboard for a specific assessment.\n\nShows top performers ranked by:\n1. Score (highest first)\n2. Time taken (fastest first for ties)\n\nIf authenticated, includes current user's rank.",
        "operationId": "get_assessment_leaderboard_api_v1_leaderboard_assessments__assessment_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "assessment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assessment Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LeaderboardResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboard/subjects/{subject_id}": {
      "get": {
        "tags": ["Leaderboard"],
        "summary": "Get subject leaderboard",
        "description": "Get leaderboard for a specific subject.\n\nAggregates performance across all assessments in the subject.\nRanks by average score and total points earned.",
        "operationId": "get_subject_leaderboard_api_v1_leaderboard_subjects__subject_id__get",
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Subject Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "type": "object", "additionalProperties": true },
                  "title": "Response Get Subject Leaderboard Api V1 Leaderboard Subjects  Subject Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboard/users/{user_id}/statistics": {
      "get": {
        "tags": ["Leaderboard"],
        "summary": "Get user statistics",
        "description": "Get comprehensive statistics for a user.\n\nIncludes:\n- Total attempts and completions\n- Pass rate and average score\n- Recent performance\n- Subject-wise breakdown",
        "operationId": "get_user_statistics_api_v1_leaderboard_users__user_id__statistics_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Get User Statistics Api V1 Leaderboard Users  User Id  Statistics Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/leaderboard/me/statistics": {
      "get": {
        "tags": ["Leaderboard"],
        "summary": "Get my statistics",
        "description": "Get statistics for the current user.",
        "operationId": "get_my_statistics_api_v1_leaderboard_me_statistics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get My Statistics Api V1 Leaderboard Me Statistics Get"
                }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/api/v1/categories/": {
      "post": {
        "tags": ["Assessment Categories"],
        "summary": "Create category configuration",
        "description": "Create a new assessment category configuration.\n\nRequires `assessment:manage` permission.",
        "operationId": "create_category_config_api_v1_categories__post",
        "security": [{ "HTTPBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryConfigCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Assessment Categories"],
        "summary": "Get all category configurations",
        "description": "Get all assessment category configurations.",
        "operationId": "get_category_configs_api_v1_categories__get",
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Active Only"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryConfigResponse"
                  },
                  "title": "Response Get Category Configs Api V1 Categories  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/v1/categories/{config_id}": {
      "get": {
        "tags": ["Assessment Categories"],
        "summary": "Get category configuration by ID",
        "description": "Get a specific category configuration.",
        "operationId": "get_category_config_api_v1_categories__config_id__get",
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Assessment Categories"],
        "summary": "Update category configuration",
        "description": "Update a category configuration.",
        "operationId": "update_category_config_api_v1_categories__config_id__put",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Config Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CategoryConfigUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Assessment Categories"],
        "summary": "Delete category configuration",
        "description": "Delete a category configuration.",
        "operationId": "delete_category_config_api_v1_categories__config_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": ["Root"],
        "summary": "Root",
        "description": "Root endpoint",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "Health check endpoint",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AssessmentCategory": {
        "type": "string",
        "enum": [
          "common_entrance",
          "primary_school",
          "junior_waec",
          "bece",
          "senior_waec",
          "neco",
          "nabteb",
          "gce",
          "jamb",
          "post_utme",
          "professional",
          "scholarship",
          "aptitude",
          "mock",
          "custom",
          "general"
        ],
        "title": "AssessmentCategory",
        "description": "Assessment categories - Nigerian examination systems"
      },
      "AssessmentCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 300,
            "minLength": 1,
            "title": "Title"
          },
          "code": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "assessment_type": { "$ref": "#/components/schemas/AssessmentType" },
          "category": { "$ref": "#/components/schemas/AssessmentCategory" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Topic Ids"
          },
          "exam_year": {
            "anyOf": [
              { "type": "integer", "maximum": 2100.0, "minimum": 1900.0 },
              { "type": "null" }
            ],
            "title": "Exam Year"
          },
          "exam_session": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "Exam Session"
          },
          "price": {
            "anyOf": [
              { "type": "number", "minimum": 0.0 },
              { "type": "string" }
            ],
            "title": "Price",
            "default": "0.00"
          },
          "currency": {
            "type": "string",
            "maxLength": 3,
            "title": "Currency",
            "default": "NGN"
          },
          "discount_price": {
            "anyOf": [
              { "type": "number", "minimum": 0.0 },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Discount Price"
          },
          "duration_minutes": {
            "type": "integer",
            "maximum": 600.0,
            "exclusiveMinimum": 0.0,
            "title": "Duration Minutes"
          },
          "available_from": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available From"
          },
          "available_until": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available Until"
          },
          "question_selection_mode": {
            "$ref": "#/components/schemas/QuestionSelectionMode",
            "default": "manual"
          },
          "passing_percentage": {
            "anyOf": [
              { "type": "number", "maximum": 100.0, "minimum": 0.0 },
              { "type": "string" }
            ],
            "title": "Passing Percentage",
            "default": "50.00"
          },
          "shuffle_questions": {
            "type": "boolean",
            "title": "Shuffle Questions",
            "default": true
          },
          "shuffle_options": {
            "type": "boolean",
            "title": "Shuffle Options",
            "default": true
          },
          "allow_question_navigation": {
            "type": "boolean",
            "title": "Allow Question Navigation",
            "default": true
          },
          "allow_backward_navigation": {
            "type": "boolean",
            "title": "Allow Backward Navigation",
            "default": true
          },
          "max_attempts": {
            "type": "integer",
            "maximum": 10.0,
            "exclusiveMinimum": 0.0,
            "title": "Max Attempts",
            "default": 3
          },
          "result_display_mode": {
            "$ref": "#/components/schemas/ResultDisplayMode",
            "default": "immediate"
          },
          "show_correct_answers": {
            "type": "boolean",
            "title": "Show Correct Answers",
            "default": true
          },
          "show_explanations": {
            "type": "boolean",
            "title": "Show Explanations",
            "default": true
          },
          "proctoring_enabled": {
            "type": "boolean",
            "title": "Proctoring Enabled",
            "default": false
          },
          "require_webcam": {
            "type": "boolean",
            "title": "Require Webcam",
            "default": false
          },
          "fullscreen_required": {
            "type": "boolean",
            "title": "Fullscreen Required",
            "default": true
          },
          "detect_tab_switching": {
            "type": "boolean",
            "title": "Detect Tab Switching",
            "default": true
          },
          "max_tab_switches": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Max Tab Switches",
            "default": 3
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": true
          },
          "require_enrollment": {
            "type": "boolean",
            "title": "Require Enrollment",
            "default": false
          },
          "category_config_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Category Config Id"
          },
          "institution_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Institution Id"
          },
          "question_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Question Ids"
          },
          "sections": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/SectionCreate" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Sections"
          }
        },
        "type": "object",
        "required": [
          "title",
          "code",
          "assessment_type",
          "category",
          "subject_id",
          "duration_minutes"
        ],
        "title": "AssessmentCreate",
        "description": "Schema for creating assessment",
        "example": {}
      },
      "AssessmentListResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AssessmentSummaryResponse"
            },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size"],
        "title": "AssessmentListResponse",
        "description": "Paginated assessment list",
        "example": {}
      },
      "AssessmentResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "title": {
            "type": "string",
            "maxLength": 300,
            "minLength": 1,
            "title": "Title"
          },
          "code": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "assessment_type": { "$ref": "#/components/schemas/AssessmentType" },
          "category": { "$ref": "#/components/schemas/AssessmentCategory" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Topic Ids"
          },
          "exam_year": {
            "anyOf": [
              { "type": "integer", "maximum": 2100.0, "minimum": 1900.0 },
              { "type": "null" }
            ],
            "title": "Exam Year"
          },
          "exam_session": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "Exam Session"
          },
          "price": { "type": "string", "title": "Price", "default": "0.00" },
          "currency": {
            "type": "string",
            "maxLength": 3,
            "title": "Currency",
            "default": "NGN"
          },
          "discount_price": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Discount Price"
          },
          "duration_minutes": {
            "type": "integer",
            "maximum": 600.0,
            "exclusiveMinimum": 0.0,
            "title": "Duration Minutes"
          },
          "available_from": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available From"
          },
          "available_until": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available Until"
          },
          "question_selection_mode": {
            "$ref": "#/components/schemas/QuestionSelectionMode",
            "default": "manual"
          },
          "passing_percentage": {
            "type": "string",
            "title": "Passing Percentage",
            "default": "50.00"
          },
          "shuffle_questions": {
            "type": "boolean",
            "title": "Shuffle Questions",
            "default": true
          },
          "shuffle_options": {
            "type": "boolean",
            "title": "Shuffle Options",
            "default": true
          },
          "allow_question_navigation": {
            "type": "boolean",
            "title": "Allow Question Navigation",
            "default": true
          },
          "allow_backward_navigation": {
            "type": "boolean",
            "title": "Allow Backward Navigation",
            "default": true
          },
          "max_attempts": {
            "type": "integer",
            "maximum": 10.0,
            "exclusiveMinimum": 0.0,
            "title": "Max Attempts",
            "default": 3
          },
          "result_display_mode": {
            "$ref": "#/components/schemas/ResultDisplayMode",
            "default": "immediate"
          },
          "show_correct_answers": {
            "type": "boolean",
            "title": "Show Correct Answers",
            "default": true
          },
          "show_explanations": {
            "type": "boolean",
            "title": "Show Explanations",
            "default": true
          },
          "proctoring_enabled": {
            "type": "boolean",
            "title": "Proctoring Enabled",
            "default": false
          },
          "require_webcam": {
            "type": "boolean",
            "title": "Require Webcam",
            "default": false
          },
          "fullscreen_required": {
            "type": "boolean",
            "title": "Fullscreen Required",
            "default": true
          },
          "detect_tab_switching": {
            "type": "boolean",
            "title": "Detect Tab Switching",
            "default": true
          },
          "max_tab_switches": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Max Tab Switches",
            "default": 3
          },
          "is_public": {
            "type": "boolean",
            "title": "Is Public",
            "default": true
          },
          "require_enrollment": {
            "type": "boolean",
            "title": "Require Enrollment",
            "default": false
          },
          "category_config_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Category Config Id"
          },
          "institution_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Institution Id"
          },
          "status": { "$ref": "#/components/schemas/AssessmentStatus" },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "total_points": { "type": "integer", "title": "Total Points" },
          "total_attempts": { "type": "integer", "title": "Total Attempts" },
          "total_completions": {
            "type": "integer",
            "title": "Total Completions"
          },
          "total_passes": { "type": "integer", "title": "Total Passes" },
          "total_fails": { "type": "integer", "title": "Total Fails" },
          "average_score": { "type": "string", "title": "Average Score" },
          "highest_score": { "type": "string", "title": "Highest Score" },
          "lowest_score": { "type": "string", "title": "Lowest Score" },
          "sections": {
            "items": { "$ref": "#/components/schemas/SectionResponse" },
            "type": "array",
            "title": "Sections",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "title",
          "code",
          "assessment_type",
          "category",
          "subject_id",
          "duration_minutes",
          "status",
          "total_questions",
          "total_points",
          "total_attempts",
          "total_completions",
          "total_passes",
          "total_fails",
          "average_score",
          "highest_score",
          "lowest_score"
        ],
        "title": "AssessmentResponse",
        "description": "Schema for assessment response",
        "example": {}
      },
      "AssessmentStatistics": {
        "properties": {
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "total_attempts": { "type": "integer", "title": "Total Attempts" },
          "total_completions": {
            "type": "integer",
            "title": "Total Completions"
          },
          "completion_rate": { "type": "string", "title": "Completion Rate" },
          "total_passes": { "type": "integer", "title": "Total Passes" },
          "total_fails": { "type": "integer", "title": "Total Fails" },
          "pass_rate": { "type": "string", "title": "Pass Rate" },
          "average_score": { "type": "string", "title": "Average Score" },
          "median_score": { "type": "string", "title": "Median Score" },
          "highest_score": { "type": "string", "title": "Highest Score" },
          "lowest_score": { "type": "string", "title": "Lowest Score" },
          "score_distribution": {
            "additionalProperties": { "type": "integer" },
            "type": "object",
            "title": "Score Distribution"
          },
          "average_completion_time": {
            "type": "integer",
            "title": "Average Completion Time"
          },
          "median_completion_time": {
            "type": "integer",
            "title": "Median Completion Time"
          },
          "most_difficult_questions": {
            "items": { "additionalProperties": true, "type": "object" },
            "type": "array",
            "title": "Most Difficult Questions"
          },
          "easiest_questions": {
            "items": { "additionalProperties": true, "type": "object" },
            "type": "array",
            "title": "Easiest Questions"
          }
        },
        "type": "object",
        "required": [
          "assessment_id",
          "total_attempts",
          "total_completions",
          "completion_rate",
          "total_passes",
          "total_fails",
          "pass_rate",
          "average_score",
          "median_score",
          "highest_score",
          "lowest_score",
          "score_distribution",
          "average_completion_time",
          "median_completion_time",
          "most_difficult_questions",
          "easiest_questions"
        ],
        "title": "AssessmentStatistics",
        "description": "Detailed assessment statistics",
        "example": {}
      },
      "AssessmentStatus": {
        "type": "string",
        "enum": [
          "draft",
          "review",
          "published",
          "scheduled",
          "archived",
          "suspended"
        ],
        "title": "AssessmentStatus",
        "description": "Assessment publication status"
      },
      "AssessmentSummaryResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "title": { "type": "string", "title": "Title" },
          "code": { "type": "string", "title": "Code" },
          "assessment_type": { "$ref": "#/components/schemas/AssessmentType" },
          "category": { "$ref": "#/components/schemas/AssessmentCategory" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "price": { "type": "string", "title": "Price" },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes"
          },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "status": { "$ref": "#/components/schemas/AssessmentStatus" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "total_attempts": { "type": "integer", "title": "Total Attempts" },
          "average_score": { "type": "string", "title": "Average Score" }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "code",
          "assessment_type",
          "category",
          "subject_id",
          "price",
          "duration_minutes",
          "total_questions",
          "status",
          "created_at",
          "total_attempts",
          "average_score"
        ],
        "title": "AssessmentSummaryResponse",
        "description": "Lightweight assessment response for listings",
        "example": {}
      },
      "AssessmentType": {
        "type": "string",
        "enum": ["test", "exam"],
        "title": "AssessmentType",
        "description": "Type of assessment"
      },
      "AssessmentUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              { "type": "string", "maxLength": 300, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/AssessmentStatus" },
              { "type": "null" }
            ]
          },
          "exam_year": {
            "anyOf": [
              { "type": "integer", "maximum": 2100.0, "minimum": 1900.0 },
              { "type": "null" }
            ],
            "title": "Exam Year"
          },
          "exam_session": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "Exam Session"
          },
          "price": {
            "anyOf": [
              { "type": "number", "minimum": 0.0 },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Price"
          },
          "discount_price": {
            "anyOf": [
              { "type": "number", "minimum": 0.0 },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Discount Price"
          },
          "duration_minutes": {
            "anyOf": [
              { "type": "integer", "maximum": 600.0, "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Duration Minutes"
          },
          "available_from": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available From"
          },
          "available_until": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Available Until"
          },
          "passing_percentage": {
            "anyOf": [
              { "type": "number", "maximum": 100.0, "minimum": 0.0 },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Passing Percentage"
          },
          "shuffle_questions": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Shuffle Questions"
          },
          "shuffle_options": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Shuffle Options"
          },
          "max_attempts": {
            "anyOf": [
              { "type": "integer", "maximum": 10.0, "exclusiveMinimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Max Attempts"
          },
          "result_display_mode": {
            "anyOf": [
              { "$ref": "#/components/schemas/ResultDisplayMode" },
              { "type": "null" }
            ]
          },
          "show_correct_answers": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Show Correct Answers"
          },
          "show_explanations": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Show Explanations"
          },
          "proctoring_enabled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Proctoring Enabled"
          },
          "is_public": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Public"
          }
        },
        "type": "object",
        "title": "AssessmentUpdate",
        "description": "Schema for updating assessment",
        "example": {}
      },
      "AssignPermissionsToRoleRequest": {
        "properties": {
          "permission_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1,
            "title": "Permission Ids"
          }
        },
        "type": "object",
        "required": ["permission_ids"],
        "title": "AssignPermissionsToRoleRequest",
        "description": "Schema for assigning permissions to role",
        "example": {}
      },
      "AssignRolesToUserRequest": {
        "properties": {
          "role_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "minItems": 1,
            "title": "Role Ids"
          }
        },
        "type": "object",
        "required": ["role_ids"],
        "title": "AssignRolesToUserRequest",
        "description": "Schema for assigning roles to user",
        "example": {}
      },
      "AttemptListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/AttemptResultResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size"],
        "title": "AttemptListResponse",
        "description": "Paginated attempt list",
        "example": {}
      },
      "AttemptProgressResponse": {
        "properties": {
          "attempt_id": {
            "type": "string",
            "format": "uuid",
            "title": "Attempt Id"
          },
          "status": { "$ref": "#/components/schemas/AttemptStatus" },
          "time_spent_seconds": {
            "type": "integer",
            "title": "Time Spent Seconds"
          },
          "time_remaining_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Time Remaining Seconds"
          },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "questions_attempted": {
            "type": "integer",
            "title": "Questions Attempted"
          },
          "questions_unanswered": {
            "type": "integer",
            "title": "Questions Unanswered"
          },
          "questions_flagged": {
            "type": "integer",
            "title": "Questions Flagged"
          },
          "can_submit": { "type": "boolean", "title": "Can Submit" }
        },
        "type": "object",
        "required": [
          "attempt_id",
          "status",
          "time_spent_seconds",
          "time_remaining_seconds",
          "total_questions",
          "questions_attempted",
          "questions_unanswered",
          "questions_flagged",
          "can_submit"
        ],
        "title": "AttemptProgressResponse",
        "description": "Response showing attempt progress",
        "example": {}
      },
      "AttemptResultResponse": {
        "properties": {
          "attempt_id": {
            "type": "string",
            "format": "uuid",
            "title": "Attempt Id"
          },
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "attempt_number": { "type": "integer", "title": "Attempt Number" },
          "status": { "$ref": "#/components/schemas/AttemptStatus" },
          "submitted_at": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Submitted At"
          },
          "score": { "type": "string", "title": "Score" },
          "percentage": { "type": "string", "title": "Percentage" },
          "points_earned": { "type": "string", "title": "Points Earned" },
          "points_possible": { "type": "string", "title": "Points Possible" },
          "passed": { "type": "boolean", "title": "Passed" },
          "grade": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Grade"
          },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "correct_answers": { "type": "integer", "title": "Correct Answers" },
          "incorrect_answers": {
            "type": "integer",
            "title": "Incorrect Answers"
          },
          "partially_correct": {
            "type": "integer",
            "title": "Partially Correct"
          },
          "rank": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Rank"
          },
          "percentile": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Percentile"
          },
          "time_spent_seconds": {
            "type": "integer",
            "title": "Time Spent Seconds"
          },
          "feedback": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Feedback"
          },
          "certificate_issued": {
            "type": "boolean",
            "title": "Certificate Issued"
          },
          "certificate_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Certificate Url"
          }
        },
        "type": "object",
        "required": [
          "attempt_id",
          "assessment_id",
          "attempt_number",
          "status",
          "submitted_at",
          "score",
          "percentage",
          "points_earned",
          "points_possible",
          "passed",
          "grade",
          "total_questions",
          "correct_answers",
          "incorrect_answers",
          "partially_correct",
          "rank",
          "percentile",
          "time_spent_seconds",
          "feedback",
          "certificate_issued",
          "certificate_url"
        ],
        "title": "AttemptResultResponse",
        "description": "Response showing attempt results",
        "example": {}
      },
      "AttemptStartRequest": {
        "properties": {
          "access_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Access Code"
          },
          "device_info": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Device Info"
          }
        },
        "type": "object",
        "title": "AttemptStartRequest",
        "description": "Request to start an assessment attempt",
        "example": {}
      },
      "AttemptStartResponse": {
        "properties": {
          "attempt_id": {
            "type": "string",
            "format": "uuid",
            "title": "Attempt Id"
          },
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "attempt_number": { "type": "integer", "title": "Attempt Number" },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes"
          },
          "must_submit_by": { "type": "string", "title": "Must Submit By" },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "proctoring_required": {
            "type": "boolean",
            "title": "Proctoring Required",
            "default": false
          },
          "proctoring_config": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Proctoring Config"
          }
        },
        "type": "object",
        "required": [
          "attempt_id",
          "assessment_id",
          "attempt_number",
          "duration_minutes",
          "must_submit_by",
          "total_questions"
        ],
        "title": "AttemptStartResponse",
        "description": "Response when starting an attempt",
        "example": {}
      },
      "AttemptStatus": {
        "type": "string",
        "enum": [
          "not_started",
          "in_progress",
          "paused",
          "submitted",
          "graded",
          "abandoned",
          "expired"
        ],
        "title": "AttemptStatus",
        "description": "Status of an assessment attempt"
      },
      "AutoAssessmentRequest": {
        "properties": {
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "title": "Topic Ids"
          },
          "assessment_type": {
            "$ref": "#/components/schemas/AssessmentType",
            "default": "test"
          },
          "number_of_questions": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 5.0,
            "title": "Number Of Questions",
            "default": 20
          },
          "duration_minutes": {
            "type": "integer",
            "maximum": 180.0,
            "minimum": 10.0,
            "title": "Duration Minutes",
            "default": 30
          },
          "difficulty_level": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Difficulty Level"
          },
          "question_types": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Question Types"
          },
          "shuffle_questions": {
            "type": "boolean",
            "title": "Shuffle Questions",
            "default": true
          },
          "shuffle_options": {
            "type": "boolean",
            "title": "Shuffle Options",
            "default": true
          },
          "allow_review": {
            "type": "boolean",
            "title": "Allow Review",
            "default": true
          }
        },
        "type": "object",
        "required": ["subject_id", "topic_ids"],
        "title": "AutoAssessmentRequest",
        "description": "Schema for auto-generating assessment from topics",
        "example": {}
      },
      "AutoAssessmentResponse": {
        "properties": {
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "title": { "type": "string", "title": "Title" },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "duration_minutes": {
            "type": "integer",
            "title": "Duration Minutes"
          },
          "topics_covered": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Topics Covered"
          },
          "message": { "type": "string", "title": "Message" }
        },
        "type": "object",
        "required": [
          "assessment_id",
          "title",
          "total_questions",
          "duration_minutes",
          "topics_covered",
          "message"
        ],
        "title": "AutoAssessmentResponse",
        "description": "Response after auto-generating assessment",
        "example": {}
      },
      "BulkQuestionImportRequest": {
        "properties": {
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid",
            "title": "Topic Id"
          },
          "questions": {
            "items": { "$ref": "#/components/schemas/QuestionCreate" },
            "type": "array",
            "title": "Questions"
          }
        },
        "type": "object",
        "required": ["subject_id", "topic_id", "questions"],
        "title": "BulkQuestionImportRequest",
        "description": "Bulk question import request",
        "example": {}
      },
      "BulkQuestionImportResponse": {
        "properties": {
          "total": { "type": "integer", "title": "Total" },
          "success": { "type": "integer", "title": "Success" },
          "failed": { "type": "integer", "title": "Failed" },
          "errors": {
            "items": { "additionalProperties": true, "type": "object" },
            "type": "array",
            "title": "Errors",
            "default": []
          }
        },
        "type": "object",
        "required": ["total", "success", "failed"],
        "title": "BulkQuestionImportResponse",
        "description": "Bulk question import response",
        "example": {}
      },
      "CategoryConfigCreate": {
        "properties": {
          "category_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Category Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "banner_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Banner Url"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "requires_payment": {
            "type": "boolean",
            "title": "Requires Payment",
            "default": false
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "exam_body": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Exam Body"
          },
          "target_level": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Target Level"
          }
        },
        "type": "object",
        "required": ["category_name", "display_name"],
        "title": "CategoryConfigCreate",
        "description": "Schema for creating category configuration",
        "example": {}
      },
      "CategoryConfigResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "category_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Category Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "banner_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Banner Url"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "requires_payment": {
            "type": "boolean",
            "title": "Requires Payment",
            "default": false
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "exam_body": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Exam Body"
          },
          "target_level": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Target Level"
          },
          "assessments_count": {
            "type": "integer",
            "title": "Assessments Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "category_name",
          "display_name"
        ],
        "title": "CategoryConfigResponse",
        "description": "Schema for category configuration response",
        "example": {}
      },
      "CategoryConfigUpdate": {
        "properties": {
          "display_name": {
            "anyOf": [
              { "type": "string", "maxLength": 200, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Display Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "banner_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Banner Url"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          },
          "requires_payment": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Requires Payment"
          },
          "order": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Order"
          },
          "exam_body": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Exam Body"
          },
          "target_level": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Target Level"
          }
        },
        "type": "object",
        "title": "CategoryConfigUpdate",
        "description": "Schema for updating category configuration",
        "example": {}
      },
      "ChangePasswordRequest": {
        "properties": {
          "current_password": { "type": "string", "title": "Current Password" },
          "new_password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 8,
            "title": "New Password"
          }
        },
        "type": "object",
        "required": ["current_password", "new_password"],
        "title": "ChangePasswordRequest",
        "description": "Schema for password change request",
        "example": {}
      },
      "DifficultyLevel": {
        "type": "string",
        "enum": ["easy", "medium", "hard", "expert"],
        "title": "DifficultyLevel",
        "description": "Question difficulty levels"
      },
      "ForgotPasswordRequest": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" }
        },
        "type": "object",
        "required": ["email"],
        "title": "ForgotPasswordRequest",
        "description": "Schema for forgot password request",
        "example": {}
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LeaderboardEntry": {
        "properties": {
          "rank": { "type": "integer", "title": "Rank" },
          "user_id": { "type": "string", "format": "uuid", "title": "User Id" },
          "user_name": { "type": "string", "title": "User Name" },
          "score": { "type": "string", "title": "Score" },
          "percentage": { "type": "string", "title": "Percentage" },
          "time_spent_seconds": {
            "type": "integer",
            "title": "Time Spent Seconds"
          },
          "submitted_at": { "type": "string", "title": "Submitted At" }
        },
        "type": "object",
        "required": [
          "rank",
          "user_id",
          "user_name",
          "score",
          "percentage",
          "time_spent_seconds",
          "submitted_at"
        ],
        "title": "LeaderboardEntry",
        "description": "Leaderboard entry",
        "example": {}
      },
      "LeaderboardResponse": {
        "properties": {
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "assessment_title": { "type": "string", "title": "Assessment Title" },
          "entries": {
            "items": { "$ref": "#/components/schemas/LeaderboardEntry" },
            "type": "array",
            "title": "Entries"
          },
          "total_participants": {
            "type": "integer",
            "title": "Total Participants"
          },
          "user_rank": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "User Rank"
          }
        },
        "type": "object",
        "required": [
          "assessment_id",
          "assessment_title",
          "entries",
          "total_participants"
        ],
        "title": "LeaderboardResponse",
        "description": "Leaderboard response",
        "example": {}
      },
      "LoginRequest": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "password": { "type": "string", "minLength": 1, "title": "Password" },
          "remember_me": {
            "type": "boolean",
            "title": "Remember Me",
            "default": false
          }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "LoginRequest",
        "description": "Schema for login request",
        "example": {}
      },
      "LoginResponse": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": { "type": "integer", "title": "Expires In" },
          "user": { "$ref": "#/components/schemas/UserResponse" }
        },
        "type": "object",
        "required": ["access_token", "refresh_token", "expires_in", "user"],
        "title": "LoginResponse",
        "description": "Schema for login response",
        "example": {}
      },
      "ManualGradeRequest": {
        "properties": {
          "points_earned": {
            "anyOf": [
              { "type": "number", "minimum": 0.0 },
              { "type": "string" }
            ],
            "title": "Points Earned"
          },
          "feedback": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Feedback"
          }
        },
        "type": "object",
        "required": ["points_earned"],
        "title": "ManualGradeRequest",
        "description": "Request to manually grade an answer",
        "example": {}
      },
      "MessageResponse": {
        "properties": { "message": { "type": "string", "title": "Message" } },
        "type": "object",
        "required": ["message"],
        "title": "MessageResponse",
        "description": "Simple message response",
        "example": {}
      },
      "PermissionCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "resource": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Resource"
          },
          "action": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Action"
          }
        },
        "type": "object",
        "required": ["name", "display_name", "resource", "action"],
        "title": "PermissionCreate",
        "description": "Schema for creating a permission",
        "example": {}
      },
      "PermissionResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "resource": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Resource"
          },
          "action": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Action"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "name",
          "display_name",
          "resource",
          "action"
        ],
        "title": "PermissionResponse",
        "description": "Schema for permission response",
        "example": {}
      },
      "PermissionUpdate": {
        "properties": {
          "display_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "PermissionUpdate",
        "description": "Schema for updating a permission",
        "example": {}
      },
      "QuestionCreate": {
        "properties": {
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid",
            "title": "Topic Id"
          },
          "question_text": {
            "type": "string",
            "minLength": 1,
            "title": "Question Text"
          },
          "question_type": { "$ref": "#/components/schemas/QuestionType" },
          "difficulty_level": {
            "$ref": "#/components/schemas/DifficultyLevel"
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "audio_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audio Url"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "points": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Points",
            "default": 1
          },
          "time_limit_seconds": {
            "anyOf": [
              { "type": "integer", "maximum": 3600.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Time Limit Seconds"
          },
          "options": {
            "items": { "$ref": "#/components/schemas/QuestionOptionCreate" },
            "type": "array",
            "minItems": 2,
            "title": "Options"
          },
          "tag_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tag Ids"
          }
        },
        "type": "object",
        "required": [
          "subject_id",
          "topic_id",
          "question_text",
          "question_type",
          "difficulty_level",
          "options"
        ],
        "title": "QuestionCreate",
        "description": "Schema for creating question",
        "example": {}
      },
      "QuestionListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/QuestionResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size"],
        "title": "QuestionListResponse",
        "description": "Paginated question list response",
        "example": {}
      },
      "QuestionOptionCreate": {
        "properties": {
          "option_text": {
            "type": "string",
            "minLength": 1,
            "title": "Option Text"
          },
          "option_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Option Order"
          },
          "is_correct": {
            "type": "boolean",
            "title": "Is Correct",
            "default": false
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "match_pair_id": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "Match Pair Id"
          },
          "correct_order": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Correct Order"
          }
        },
        "type": "object",
        "required": ["option_text", "option_order"],
        "title": "QuestionOptionCreate",
        "description": "Schema for creating question option",
        "example": {}
      },
      "QuestionOptionPublicResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "option_text": { "type": "string", "title": "Option Text" },
          "option_order": { "type": "integer", "title": "Option Order" },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "match_pair_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Match Pair Id"
          }
        },
        "type": "object",
        "required": ["id", "option_text", "option_order"],
        "title": "QuestionOptionPublicResponse",
        "description": "Public question option response (without correct answers)",
        "example": {}
      },
      "QuestionOptionResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "option_text": {
            "type": "string",
            "minLength": 1,
            "title": "Option Text"
          },
          "option_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Option Order"
          },
          "is_correct": {
            "type": "boolean",
            "title": "Is Correct",
            "default": false
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "match_pair_id": {
            "anyOf": [
              { "type": "string", "maxLength": 50 },
              { "type": "null" }
            ],
            "title": "Match Pair Id"
          },
          "correct_order": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Correct Order"
          },
          "question_id": {
            "type": "string",
            "format": "uuid",
            "title": "Question Id"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "option_text",
          "option_order",
          "question_id"
        ],
        "title": "QuestionOptionResponse",
        "description": "Schema for question option response",
        "example": {}
      },
      "QuestionOptionResponseTrim": {
        "properties": {
          "option_text": {
            "type": "string",
            "minLength": 1,
            "title": "Option Text"
          },
          "option_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Option Order"
          },
          "is_correct": {
            "type": "boolean",
            "title": "Is Correct",
            "default": false
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          }
        },
        "type": "object",
        "required": ["option_text", "option_order"],
        "title": "QuestionOptionResponseTrim",
        "description": "Base question option schema",
        "example": {}
      },
      "QuestionPublicResponse": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid",
            "title": "Topic Id"
          },
          "question_text": { "type": "string", "title": "Question Text" },
          "question_type": { "$ref": "#/components/schemas/QuestionType" },
          "difficulty_level": {
            "$ref": "#/components/schemas/DifficultyLevel"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "audio_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audio Url"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "points": { "type": "integer", "title": "Points" },
          "time_limit_seconds": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Time Limit Seconds"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/QuestionOptionPublicResponse"
            },
            "type": "array",
            "title": "Options",
            "default": []
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/QuestionTagResponse" },
            "type": "array",
            "title": "Tags",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "subject_id",
          "topic_id",
          "question_text",
          "question_type",
          "difficulty_level",
          "points"
        ],
        "title": "QuestionPublicResponse",
        "description": "Public question response (without answers for students taking exams)",
        "example": {}
      },
      "QuestionResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "topic_id": {
            "type": "string",
            "format": "uuid",
            "title": "Topic Id"
          },
          "question_text": {
            "type": "string",
            "minLength": 1,
            "title": "Question Text"
          },
          "question_type": { "$ref": "#/components/schemas/QuestionType" },
          "difficulty_level": {
            "$ref": "#/components/schemas/DifficultyLevel"
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "audio_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audio Url"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "points": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Points",
            "default": 1
          },
          "time_limit_seconds": {
            "anyOf": [
              { "type": "integer", "maximum": 3600.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Time Limit Seconds"
          },
          "status": { "$ref": "#/components/schemas/QuestionStatus" },
          "times_used": { "type": "integer", "title": "Times Used" },
          "times_correct": { "type": "integer", "title": "Times Correct" },
          "times_incorrect": { "type": "integer", "title": "Times Incorrect" },
          "success_rate": { "type": "number", "title": "Success Rate" },
          "reviewed_by": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Reviewed By"
          },
          "approved_at": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Approved At"
          },
          "options": {
            "items": { "$ref": "#/components/schemas/QuestionOptionResponse" },
            "type": "array",
            "title": "Options",
            "default": []
          },
          "tags": {
            "items": { "$ref": "#/components/schemas/QuestionTagResponse" },
            "type": "array",
            "title": "Tags",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "subject_id",
          "topic_id",
          "question_text",
          "question_type",
          "difficulty_level",
          "status",
          "times_used",
          "times_correct",
          "times_incorrect",
          "success_rate"
        ],
        "title": "QuestionResponse",
        "description": "Schema for full question response (with answers)",
        "example": {}
      },
      "QuestionResponseTrim": {
        "properties": {
          "question_text": {
            "type": "string",
            "minLength": 1,
            "title": "Question Text"
          },
          "question_type": { "$ref": "#/components/schemas/QuestionType" },
          "difficulty_level": {
            "$ref": "#/components/schemas/DifficultyLevel"
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/QuestionOptionResponseTrim"
            },
            "type": "array",
            "title": "Options",
            "default": []
          }
        },
        "type": "object",
        "required": ["question_text", "question_type", "difficulty_level"],
        "title": "QuestionResponseTrim",
        "description": "Schema for trim question response (with answers)",
        "example": {}
      },
      "QuestionReviewRequest": {
        "properties": {
          "approved": { "type": "boolean", "title": "Approved" },
          "feedback": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Feedback"
          }
        },
        "type": "object",
        "required": ["approved"],
        "title": "QuestionReviewRequest",
        "description": "Question review request",
        "example": {}
      },
      "QuestionSelectionMode": {
        "type": "string",
        "enum": ["manual", "random", "adaptive"],
        "title": "QuestionSelectionMode",
        "description": "How questions are selected for assessment"
      },
      "QuestionStatus": {
        "type": "string",
        "enum": ["draft", "review", "approved", "rejected", "archived"],
        "title": "QuestionStatus",
        "description": "Question status"
      },
      "QuestionTagCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "color": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "QuestionTagCreate",
        "description": "Schema for creating question tag",
        "example": {}
      },
      "QuestionTagResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "color": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color"
          },
          "questions_count": {
            "type": "integer",
            "title": "Questions Count",
            "default": 0
          }
        },
        "type": "object",
        "required": ["created_at", "updated_at", "id", "name"],
        "title": "QuestionTagResponse",
        "description": "Schema for question tag response",
        "example": {}
      },
      "QuestionTagUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 50, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 200 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "color": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color"
          }
        },
        "type": "object",
        "title": "QuestionTagUpdate",
        "description": "Schema for updating question tag",
        "example": {}
      },
      "QuestionType": {
        "type": "string",
        "enum": [
          "multiple_choice",
          "true_false",
          "fill_in_blank",
          "essay",
          "matching",
          "ordering"
        ],
        "title": "QuestionType",
        "description": "Types of questions"
      },
      "QuestionUpdate": {
        "properties": {
          "question_text": {
            "anyOf": [{ "type": "string", "minLength": 1 }, { "type": "null" }],
            "title": "Question Text"
          },
          "question_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/QuestionType" },
              { "type": "null" }
            ]
          },
          "difficulty_level": {
            "anyOf": [
              { "$ref": "#/components/schemas/DifficultyLevel" },
              { "type": "null" }
            ]
          },
          "explanation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Explanation"
          },
          "image_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Image Url"
          },
          "audio_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Audio Url"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "points": {
            "anyOf": [
              { "type": "integer", "maximum": 100.0, "minimum": 1.0 },
              { "type": "null" }
            ],
            "title": "Points"
          },
          "time_limit_seconds": {
            "anyOf": [
              { "type": "integer", "maximum": 3600.0, "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Time Limit Seconds"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/QuestionStatus" },
              { "type": "null" }
            ]
          },
          "tag_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Tag Ids"
          }
        },
        "type": "object",
        "title": "QuestionUpdate",
        "description": "Schema for updating question",
        "example": {}
      },
      "RefreshTokenRequest": {
        "properties": {
          "refresh_token": { "type": "string", "title": "Refresh Token" }
        },
        "type": "object",
        "required": ["refresh_token"],
        "title": "RefreshTokenRequest",
        "description": "Schema for refresh token request",
        "example": {}
      },
      "RegisterRequest": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Last Name"
          },
          "middle_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Middle Name"
          },
          "phone_number": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Phone Number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Date Of Birth"
          },
          "user_type": { "$ref": "#/components/schemas/UserType" },
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 8,
            "title": "Password"
          },
          "username": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 3 },
              { "type": "null" }
            ],
            "title": "Username"
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "user_type",
          "password"
        ],
        "title": "RegisterRequest",
        "description": "Schema for registration request",
        "example": {}
      },
      "RegisterResponse": {
        "properties": {
          "message": { "type": "string", "title": "Message" },
          "user": { "$ref": "#/components/schemas/UserResponse" }
        },
        "type": "object",
        "required": ["message", "user"],
        "title": "RegisterResponse",
        "description": "Schema for registration response",
        "example": {}
      },
      "ResetPasswordRequest": {
        "properties": {
          "token": { "type": "string", "title": "Token" },
          "new_password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 8,
            "title": "New Password"
          }
        },
        "type": "object",
        "required": ["token", "new_password"],
        "title": "ResetPasswordRequest",
        "description": "Schema for password reset request",
        "example": {}
      },
      "ResultDisplayMode": {
        "type": "string",
        "enum": ["immediate", "scheduled", "manual", "never"],
        "title": "ResultDisplayMode",
        "description": "When to show results"
      },
      "RoleCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "role_type": { "$ref": "#/components/schemas/RoleType" },
          "permission_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "title": "Permission Ids",
            "default": []
          }
        },
        "type": "object",
        "required": ["name", "display_name", "role_type"],
        "title": "RoleCreate",
        "description": "Schema for creating a role",
        "example": {}
      },
      "RoleResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "display_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "role_type": { "$ref": "#/components/schemas/RoleType" },
          "is_system": { "type": "boolean", "title": "Is System" },
          "permissions": {
            "items": { "$ref": "#/components/schemas/PermissionResponse" },
            "type": "array",
            "title": "Permissions",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "name",
          "display_name",
          "role_type",
          "is_system"
        ],
        "title": "RoleResponse",
        "description": "Schema for role response",
        "example": {}
      },
      "RoleType": {
        "type": "string",
        "enum": ["system", "institution", "custom"],
        "title": "RoleType",
        "description": "Categories of roles"
      },
      "RoleUpdate": {
        "properties": {
          "display_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Display Name"
          },
          "description": {
            "anyOf": [
              { "type": "string", "maxLength": 500 },
              { "type": "null" }
            ],
            "title": "Description"
          },
          "permission_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Permission Ids"
          }
        },
        "type": "object",
        "title": "RoleUpdate",
        "description": "Schema for updating a role",
        "example": {}
      },
      "SaveAnswerRequest": {
        "properties": {
          "question_id": {
            "type": "string",
            "format": "uuid",
            "title": "Question Id"
          },
          "selected_option_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Selected Option Ids"
          },
          "text_answer": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Text Answer"
          },
          "matching_pairs": {
            "anyOf": [
              {
                "additionalProperties": { "type": "string" },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Matching Pairs"
          },
          "ordered_items": {
            "anyOf": [
              { "items": { "type": "string" }, "type": "array" },
              { "type": "null" }
            ],
            "title": "Ordered Items"
          },
          "flagged_for_review": {
            "type": "boolean",
            "title": "Flagged For Review",
            "default": false
          }
        },
        "type": "object",
        "required": ["question_id"],
        "title": "SaveAnswerRequest",
        "description": "Request to save an answer",
        "example": {}
      },
      "SectionCreate": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Title"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "order": { "type": "integer", "minimum": 0.0, "title": "Order" },
          "time_limit_minutes": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Time Limit Minutes"
          },
          "shuffle_questions": {
            "type": "boolean",
            "title": "Shuffle Questions",
            "default": true
          },
          "is_optional": {
            "type": "boolean",
            "title": "Is Optional",
            "default": false
          },
          "question_ids": {
            "items": { "type": "string", "format": "uuid" },
            "type": "array",
            "title": "Question Ids"
          }
        },
        "type": "object",
        "required": ["title", "order"],
        "title": "SectionCreate",
        "description": "Schema for creating section",
        "example": {}
      },
      "SectionResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "title": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Title"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "instructions": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Instructions"
          },
          "order": { "type": "integer", "minimum": 0.0, "title": "Order" },
          "time_limit_minutes": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Time Limit Minutes"
          },
          "shuffle_questions": {
            "type": "boolean",
            "title": "Shuffle Questions",
            "default": true
          },
          "is_optional": {
            "type": "boolean",
            "title": "Is Optional",
            "default": false
          },
          "assessment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assessment Id"
          },
          "total_questions": { "type": "integer", "title": "Total Questions" },
          "total_points": { "type": "integer", "title": "Total Points" }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "title",
          "order",
          "assessment_id",
          "total_questions",
          "total_points"
        ],
        "title": "SectionResponse",
        "description": "Schema for section response",
        "example": {}
      },
      "SubjectCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "code"],
        "title": "SubjectCreate",
        "description": "Schema for creating a subject",
        "example": {}
      },
      "SubjectListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/SubjectResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size"],
        "title": "SubjectListResponse",
        "description": "Paginated subject list response",
        "example": {}
      },
      "SubjectResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_featured": {
            "type": "boolean",
            "title": "Is Featured",
            "default": false
          },
          "topics_count": {
            "type": "integer",
            "title": "Topics Count",
            "default": 0
          },
          "questions_count": {
            "type": "integer",
            "title": "Questions Count",
            "default": 0
          }
        },
        "type": "object",
        "required": ["created_at", "updated_at", "id", "name", "code"],
        "title": "SubjectResponse",
        "description": "Schema for subject response",
        "example": {}
      },
      "SubjectUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 200, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "code": {
            "anyOf": [
              { "type": "string", "maxLength": 20, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "icon_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Icon Url"
          },
          "color_code": {
            "anyOf": [
              { "type": "string", "pattern": "^#[0-9A-Fa-f]{6}$" },
              { "type": "null" }
            ],
            "title": "Color Code"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Order"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          },
          "is_featured": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Featured"
          }
        },
        "type": "object",
        "title": "SubjectUpdate",
        "description": "Schema for updating a subject",
        "example": {}
      },
      "SuccessResponse": {
        "properties": {
          "success": { "type": "boolean", "title": "Success", "default": true },
          "message": { "type": "string", "title": "Message" },
          "data": {
            "anyOf": [
              { "additionalProperties": true, "type": "object" },
              { "type": "null" }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["message"],
        "title": "SuccessResponse",
        "description": "Standard success response",
        "example": {}
      },
      "TokenResponse": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": { "type": "integer", "title": "Expires In" }
        },
        "type": "object",
        "required": ["access_token", "refresh_token", "expires_in"],
        "title": "TokenResponse",
        "description": "Schema for token response",
        "example": {}
      },
      "TopicCreate": {
        "properties": {
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "document_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Url"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "estimated_time_minutes": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Estimated Time Minutes"
          },
          "difficulty_level": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Difficulty Level"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          }
        },
        "type": "object",
        "required": ["subject_id", "name", "code"],
        "title": "TopicCreate",
        "description": "Schema for creating a topic",
        "example": {}
      },
      "TopicListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/TopicResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "page": { "type": "integer", "title": "Page" },
          "page_size": { "type": "integer", "title": "Page Size" }
        },
        "type": "object",
        "required": ["items", "total", "page", "page_size"],
        "title": "TopicListResponse",
        "description": "Paginated topic list response",
        "example": {}
      },
      "TopicQuestionListResponse": {
        "properties": {
          "topics": {
            "items": { "$ref": "#/components/schemas/TopicQuestionsResponse" },
            "type": "array",
            "title": "Topics"
          }
        },
        "type": "object",
        "required": ["topics"],
        "title": "TopicQuestionListResponse",
        "example": {}
      },
      "TopicQuestionsResponse": {
        "properties": {
          "topic_name": { "type": "string", "title": "Topic Name" },
          "questions": {
            "items": { "$ref": "#/components/schemas/QuestionResponseTrim" },
            "type": "array",
            "title": "Questions"
          }
        },
        "type": "object",
        "required": ["topic_name", "questions"],
        "title": "TopicQuestionsResponse",
        "example": {}
      },
      "TopicResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "subject_id": {
            "type": "string",
            "format": "uuid",
            "title": "Subject Id"
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name"
          },
          "code": {
            "type": "string",
            "maxLength": 20,
            "minLength": 1,
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "document_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Url"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Order",
            "default": 0
          },
          "estimated_time_minutes": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Estimated Time Minutes"
          },
          "difficulty_level": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Difficulty Level"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "questions_count": {
            "type": "integer",
            "title": "Questions Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "subject_id",
          "name",
          "code"
        ],
        "title": "TopicResponse",
        "description": "Schema for topic response",
        "example": {}
      },
      "TopicUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              { "type": "string", "maxLength": 200, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Name"
          },
          "code": {
            "anyOf": [
              { "type": "string", "maxLength": 20, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Code"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "content": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Content"
          },
          "video_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Video Url"
          },
          "document_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Url"
          },
          "parent_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Id"
          },
          "order": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Order"
          },
          "estimated_time_minutes": {
            "anyOf": [
              { "type": "integer", "minimum": 0.0 },
              { "type": "null" }
            ],
            "title": "Estimated Time Minutes"
          },
          "difficulty_level": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Difficulty Level"
          },
          "is_active": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "TopicUpdate",
        "description": "Schema for updating a topic",
        "example": {}
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Last Name"
          },
          "middle_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Middle Name"
          },
          "phone_number": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Phone Number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Date Of Birth"
          },
          "user_type": { "$ref": "#/components/schemas/UserType" },
          "password": {
            "type": "string",
            "maxLength": 100,
            "minLength": 8,
            "title": "Password"
          },
          "username": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 3 },
              { "type": "null" }
            ],
            "title": "Username"
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "user_type",
          "password"
        ],
        "title": "UserCreate",
        "description": "Schema for creating a user",
        "example": {}
      },
      "UserResponse": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "first_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Last Name"
          },
          "middle_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Middle Name"
          },
          "phone_number": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Phone Number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Date Of Birth"
          },
          "user_type": { "$ref": "#/components/schemas/UserType" },
          "username": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Username"
          },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "is_verified": { "type": "boolean", "title": "Is Verified" },
          "is_email_verified": {
            "type": "boolean",
            "title": "Is Email Verified"
          },
          "profile_picture_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Profile Picture Url"
          },
          "bio": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Bio"
          },
          "language": { "type": "string", "title": "Language" },
          "timezone": { "type": "string", "title": "Timezone" },
          "last_login": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Login"
          },
          "roles": {
            "items": { "$ref": "#/components/schemas/RoleResponse" },
            "type": "array",
            "title": "Roles",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "updated_at",
          "id",
          "email",
          "first_name",
          "last_name",
          "user_type",
          "username",
          "is_active",
          "is_verified",
          "is_email_verified",
          "profile_picture_url",
          "bio",
          "language",
          "timezone",
          "last_login"
        ],
        "title": "UserResponse",
        "description": "Schema for user response",
        "example": {}
      },
      "UserType": {
        "type": "string",
        "enum": ["student", "guardian", "institution_admin", "platform_admin"],
        "title": "UserType",
        "description": "Types of users in the system"
      },
      "UserUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100, "minLength": 1 },
              { "type": "null" }
            ],
            "title": "Last Name"
          },
          "middle_name": {
            "anyOf": [
              { "type": "string", "maxLength": 100 },
              { "type": "null" }
            ],
            "title": "Middle Name"
          },
          "phone_number": {
            "anyOf": [
              { "type": "string", "maxLength": 20 },
              { "type": "null" }
            ],
            "title": "Phone Number"
          },
          "date_of_birth": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Date Of Birth"
          },
          "profile_picture_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Profile Picture Url"
          },
          "bio": {
            "anyOf": [
              { "type": "string", "maxLength": 1000 },
              { "type": "null" }
            ],
            "title": "Bio"
          },
          "language": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Language"
          },
          "timezone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Timezone"
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "Schema for updating a user",
        "example": {}
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VerifyEmailRequest": {
        "properties": { "token": { "type": "string", "title": "Token" } },
        "type": "object",
        "required": ["token"],
        "title": "VerifyEmailRequest",
        "description": "Schema for email verification request",
        "example": {}
      }
    },
    "securitySchemes": { "HTTPBearer": { "type": "http", "scheme": "bearer" } }
  }
}
